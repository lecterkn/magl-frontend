/* tslint:disable */
/* eslint-disable */
/**
 * MyAnimeGameList
 * MyAnimeGameList API Server
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface RequestMyListAddRequest
 */
export interface RequestMyListAddRequest {
    /**
     * 
     * @type {number}
     * @memberof RequestMyListAddRequest
     */
    'score': number;
    /**
     * 
     * @type {string}
     * @memberof RequestMyListAddRequest
     */
    'storyId': string;
}
/**
 * 
 * @export
 * @interface RequestMyListUpdateRequest
 */
export interface RequestMyListUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof RequestMyListUpdateRequest
     */
    'score': number;
    /**
     * 
     * @type {string}
     * @memberof RequestMyListUpdateRequest
     */
    'storyId': string;
}
/**
 * 
 * @export
 * @interface RequestUserSigninRequest
 */
export interface RequestUserSigninRequest {
    /**
     * 
     * @type {string}
     * @memberof RequestUserSigninRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RequestUserSigninRequest
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface RequestUserSignupRequest
 */
export interface RequestUserSignupRequest {
    /**
     * 
     * @type {string}
     * @memberof RequestUserSignupRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RequestUserSignupRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RequestUserSignupRequest
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface ResponseCategoryListResponse
 */
export interface ResponseCategoryListResponse {
    /**
     * 
     * @type {Array<ResponseCategoryResponse>}
     * @memberof ResponseCategoryListResponse
     */
    'list': Array<ResponseCategoryResponse>;
}
/**
 * 
 * @export
 * @interface ResponseCategoryResponse
 */
export interface ResponseCategoryResponse {
    /**
     * 
     * @type {string}
     * @memberof ResponseCategoryResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseCategoryResponse
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseCategoryResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseCategoryResponse
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseCategoryResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseCategoryResponse
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ResponseMyListListResponse
 */
export interface ResponseMyListListResponse {
    /**
     * 
     * @type {Array<ResponseMyListResponse>}
     * @memberof ResponseMyListListResponse
     */
    'list': Array<ResponseMyListResponse>;
}
/**
 * 
 * @export
 * @interface ResponseMyListResponse
 */
export interface ResponseMyListResponse {
    /**
     * 
     * @type {string}
     * @memberof ResponseMyListResponse
     */
    'categoryId': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseMyListResponse
     */
    'categoryName': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseMyListResponse
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseMyListResponse
     */
    'episode': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseMyListResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseMyListResponse
     */
    'imageUrl': string;
    /**
     * 
     * @type {number}
     * @memberof ResponseMyListResponse
     */
    'score': number;
    /**
     * 
     * @type {string}
     * @memberof ResponseMyListResponse
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface ResponseRefreshResponse
 */
export interface ResponseRefreshResponse {
    /**
     * 
     * @type {string}
     * @memberof ResponseRefreshResponse
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRefreshResponse
     */
    'expiresIn'?: string;
}
/**
 * 
 * @export
 * @interface ResponseStoryListResponse
 */
export interface ResponseStoryListResponse {
    /**
     * 
     * @type {Array<ResponseStoryResponse>}
     * @memberof ResponseStoryListResponse
     */
    'list': Array<ResponseStoryResponse>;
}
/**
 * 
 * @export
 * @interface ResponseStoryResponse
 */
export interface ResponseStoryResponse {
    /**
     * 
     * @type {string}
     * @memberof ResponseStoryResponse
     */
    'categoryId': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseStoryResponse
     */
    'categoryName': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseStoryResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseStoryResponse
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseStoryResponse
     */
    'episode': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseStoryResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseStoryResponse
     */
    'imageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseStoryResponse
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseStoryResponse
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ResponseUserResponse
 */
export interface ResponseUserResponse {
    /**
     * 
     * @type {string}
     * @memberof ResponseUserResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseUserResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseUserResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseUserResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseUserResponse
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseUserResponse
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ResponseUserSigninResponse
 */
export interface ResponseUserSigninResponse {
    /**
     * 
     * @type {string}
     * @memberof ResponseUserSigninResponse
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseUserSigninResponse
     */
    'refreshToken': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * アクセストークンをリフレッシュする
         * @summary Refresh
         * @param {string} xRefreshToken リフレッシュトークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshPost: async (xRefreshToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xRefreshToken' is not null or undefined
            assertParamExists('refreshPost', 'xRefreshToken', xRefreshToken)
            const localVarPath = `/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (xRefreshToken != null) {
                localVarHeaderParameter['x-refresh-token'] = String(xRefreshToken);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのサインインを行う
         * @summary SignIn
         * @param {RequestUserSigninRequest} request ユーザーログインリクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signinPost: async (request: RequestUserSigninRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('signinPost', 'request', request)
            const localVarPath = `/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのサインアップを行う
         * @summary SignUp
         * @param {RequestUserSignupRequest} request ユーザーログインリクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupPost: async (request: RequestUserSignupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('signupPost', 'request', request)
            const localVarPath = `/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * アクセストークンをリフレッシュする
         * @summary Refresh
         * @param {string} xRefreshToken リフレッシュトークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshPost(xRefreshToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshPost(xRefreshToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.refreshPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ユーザーのサインインを行う
         * @summary SignIn
         * @param {RequestUserSigninRequest} request ユーザーログインリクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signinPost(request: RequestUserSigninRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUserSigninResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signinPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.signinPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ユーザーのサインアップを行う
         * @summary SignUp
         * @param {RequestUserSignupRequest} request ユーザーログインリクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signupPost(request: RequestUserSignupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signupPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.signupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * アクセストークンをリフレッシュする
         * @summary Refresh
         * @param {string} xRefreshToken リフレッシュトークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshPost(xRefreshToken: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseRefreshResponse> {
            return localVarFp.refreshPost(xRefreshToken, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーのサインインを行う
         * @summary SignIn
         * @param {RequestUserSigninRequest} request ユーザーログインリクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signinPost(request: RequestUserSigninRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUserSigninResponse> {
            return localVarFp.signinPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーのサインアップを行う
         * @summary SignUp
         * @param {RequestUserSignupRequest} request ユーザーログインリクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupPost(request: RequestUserSignupRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseUserResponse> {
            return localVarFp.signupPost(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * アクセストークンをリフレッシュする
     * @summary Refresh
     * @param {string} xRefreshToken リフレッシュトークン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshPost(xRefreshToken: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).refreshPost(xRefreshToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーのサインインを行う
     * @summary SignIn
     * @param {RequestUserSigninRequest} request ユーザーログインリクエスト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public signinPost(request: RequestUserSigninRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).signinPost(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーのサインアップを行う
     * @summary SignUp
     * @param {RequestUserSignupRequest} request ユーザーログインリクエスト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public signupPost(request: RequestUserSignupRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).signupPost(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * カテゴリを一覧取得
         * @summary GetCategories
         * @param {string} [keyword] 検索キーワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet: async (keyword?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * カテゴリを新規作成
         * @summary CreateCategory
         * @param {string} name カテゴリ名
         * @param {string} description カテゴリ概要
         * @param {File} [image] 画像ファイル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesPost: async (name: string, description: string, image?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('categoriesPost', 'name', name)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('categoriesPost', 'description', description)
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * カテゴリを一覧取得
         * @summary GetCategories
         * @param {string} [keyword] 検索キーワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriesGet(keyword?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCategoryListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesGet(keyword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.categoriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * カテゴリを新規作成
         * @summary CreateCategory
         * @param {string} name カテゴリ名
         * @param {string} description カテゴリ概要
         * @param {File} [image] 画像ファイル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriesPost(name: string, description: string, image?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesPost(name, description, image, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.categoriesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * カテゴリを一覧取得
         * @summary GetCategories
         * @param {string} [keyword] 検索キーワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet(keyword?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseCategoryListResponse> {
            return localVarFp.categoriesGet(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * カテゴリを新規作成
         * @summary CreateCategory
         * @param {string} name カテゴリ名
         * @param {string} description カテゴリ概要
         * @param {File} [image] 画像ファイル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesPost(name: string, description: string, image?: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.categoriesPost(name, description, image, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * カテゴリを一覧取得
     * @summary GetCategories
     * @param {string} [keyword] 検索キーワード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoriesGet(keyword?: string, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoriesGet(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * カテゴリを新規作成
     * @summary CreateCategory
     * @param {string} name カテゴリ名
     * @param {string} description カテゴリ概要
     * @param {File} [image] 画像ファイル
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoriesPost(name: string, description: string, image?: File, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoriesPost(name, description, image, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MylistApi - axios parameter creator
 * @export
 */
export const MylistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * マイリストを取得
         * @summary GetMyList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mylistsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mylists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * マイリストのストーリーを更新
         * @summary UpdateMyList
         * @param {RequestMyListUpdateRequest} request マイリスト更新リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mylistsPatch: async (request: RequestMyListUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('mylistsPatch', 'request', request)
            const localVarPath = `/mylists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * マイリストにストーリーを追加
         * @summary AddMyList
         * @param {RequestMyListAddRequest} request マイリスト追加リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mylistsPost: async (request: RequestMyListAddRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('mylistsPost', 'request', request)
            const localVarPath = `/mylists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * マイリストからストーリーを削除
         * @summary RemoveFromMyList
         * @param {string} storyId ストーリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mylistsStoryIdDelete: async (storyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storyId' is not null or undefined
            assertParamExists('mylistsStoryIdDelete', 'storyId', storyId)
            const localVarPath = `/mylists/{storyId}`
                .replace(`{${"storyId"}}`, encodeURIComponent(String(storyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MylistApi - functional programming interface
 * @export
 */
export const MylistApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MylistApiAxiosParamCreator(configuration)
    return {
        /**
         * マイリストを取得
         * @summary GetMyList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mylistsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMyListListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mylistsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MylistApi.mylistsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * マイリストのストーリーを更新
         * @summary UpdateMyList
         * @param {RequestMyListUpdateRequest} request マイリスト更新リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mylistsPatch(request: RequestMyListUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mylistsPatch(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MylistApi.mylistsPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * マイリストにストーリーを追加
         * @summary AddMyList
         * @param {RequestMyListAddRequest} request マイリスト追加リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mylistsPost(request: RequestMyListAddRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mylistsPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MylistApi.mylistsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * マイリストからストーリーを削除
         * @summary RemoveFromMyList
         * @param {string} storyId ストーリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mylistsStoryIdDelete(storyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mylistsStoryIdDelete(storyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MylistApi.mylistsStoryIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MylistApi - factory interface
 * @export
 */
export const MylistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MylistApiFp(configuration)
    return {
        /**
         * マイリストを取得
         * @summary GetMyList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mylistsGet(options?: RawAxiosRequestConfig): AxiosPromise<ResponseMyListListResponse> {
            return localVarFp.mylistsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * マイリストのストーリーを更新
         * @summary UpdateMyList
         * @param {RequestMyListUpdateRequest} request マイリスト更新リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mylistsPatch(request: RequestMyListUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.mylistsPatch(request, options).then((request) => request(axios, basePath));
        },
        /**
         * マイリストにストーリーを追加
         * @summary AddMyList
         * @param {RequestMyListAddRequest} request マイリスト追加リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mylistsPost(request: RequestMyListAddRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.mylistsPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * マイリストからストーリーを削除
         * @summary RemoveFromMyList
         * @param {string} storyId ストーリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mylistsStoryIdDelete(storyId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.mylistsStoryIdDelete(storyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MylistApi - object-oriented interface
 * @export
 * @class MylistApi
 * @extends {BaseAPI}
 */
export class MylistApi extends BaseAPI {
    /**
     * マイリストを取得
     * @summary GetMyList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MylistApi
     */
    public mylistsGet(options?: RawAxiosRequestConfig) {
        return MylistApiFp(this.configuration).mylistsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * マイリストのストーリーを更新
     * @summary UpdateMyList
     * @param {RequestMyListUpdateRequest} request マイリスト更新リクエスト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MylistApi
     */
    public mylistsPatch(request: RequestMyListUpdateRequest, options?: RawAxiosRequestConfig) {
        return MylistApiFp(this.configuration).mylistsPatch(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * マイリストにストーリーを追加
     * @summary AddMyList
     * @param {RequestMyListAddRequest} request マイリスト追加リクエスト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MylistApi
     */
    public mylistsPost(request: RequestMyListAddRequest, options?: RawAxiosRequestConfig) {
        return MylistApiFp(this.configuration).mylistsPost(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * マイリストからストーリーを削除
     * @summary RemoveFromMyList
     * @param {string} storyId ストーリーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MylistApi
     */
    public mylistsStoryIdDelete(storyId: string, options?: RawAxiosRequestConfig) {
        return MylistApiFp(this.configuration).mylistsStoryIdDelete(storyId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StoryApi - axios parameter creator
 * @export
 */
export const StoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * カテゴリを一覧取得
         * @summary GetStories
         * @param {string} [keyword] 検索キーワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storiesGet: async (keyword?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ストーリーを新規作成
         * @summary CreateStory
         * @param {string} categoryId カテゴリID
         * @param {string} title ストーリータイトル
         * @param {string} episode ストーリー区分
         * @param {string} description ストーリー概要
         * @param {File} [image] 画像ファイル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storiesPost: async (categoryId: string, title: string, episode: string, description: string, image?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('storiesPost', 'categoryId', categoryId)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('storiesPost', 'title', title)
            // verify required parameter 'episode' is not null or undefined
            assertParamExists('storiesPost', 'episode', episode)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('storiesPost', 'description', description)
            const localVarPath = `/stories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (categoryId !== undefined) { 
                localVarFormParams.append('categoryId', categoryId as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (episode !== undefined) { 
                localVarFormParams.append('episode', episode as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoryApi - functional programming interface
 * @export
 */
export const StoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoryApiAxiosParamCreator(configuration)
    return {
        /**
         * カテゴリを一覧取得
         * @summary GetStories
         * @param {string} [keyword] 検索キーワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storiesGet(keyword?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseStoryListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storiesGet(keyword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoryApi.storiesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ストーリーを新規作成
         * @summary CreateStory
         * @param {string} categoryId カテゴリID
         * @param {string} title ストーリータイトル
         * @param {string} episode ストーリー区分
         * @param {string} description ストーリー概要
         * @param {File} [image] 画像ファイル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storiesPost(categoryId: string, title: string, episode: string, description: string, image?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storiesPost(categoryId, title, episode, description, image, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoryApi.storiesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StoryApi - factory interface
 * @export
 */
export const StoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoryApiFp(configuration)
    return {
        /**
         * カテゴリを一覧取得
         * @summary GetStories
         * @param {string} [keyword] 検索キーワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storiesGet(keyword?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseStoryListResponse> {
            return localVarFp.storiesGet(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * ストーリーを新規作成
         * @summary CreateStory
         * @param {string} categoryId カテゴリID
         * @param {string} title ストーリータイトル
         * @param {string} episode ストーリー区分
         * @param {string} description ストーリー概要
         * @param {File} [image] 画像ファイル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storiesPost(categoryId: string, title: string, episode: string, description: string, image?: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storiesPost(categoryId, title, episode, description, image, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StoryApi - object-oriented interface
 * @export
 * @class StoryApi
 * @extends {BaseAPI}
 */
export class StoryApi extends BaseAPI {
    /**
     * カテゴリを一覧取得
     * @summary GetStories
     * @param {string} [keyword] 検索キーワード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    public storiesGet(keyword?: string, options?: RawAxiosRequestConfig) {
        return StoryApiFp(this.configuration).storiesGet(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ストーリーを新規作成
     * @summary CreateStory
     * @param {string} categoryId カテゴリID
     * @param {string} title ストーリータイトル
     * @param {string} episode ストーリー区分
     * @param {string} description ストーリー概要
     * @param {File} [image] 画像ファイル
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    public storiesPost(categoryId: string, title: string, episode: string, description: string, image?: File, options?: RawAxiosRequestConfig) {
        return StoryApiFp(this.configuration).storiesPost(categoryId, title, episode, description, image, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 自身のユーザー情報を取得する
         * @summary GetMe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 自身のユーザー情報を取得する
         * @summary GetMe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.meGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 自身のユーザー情報を取得する
         * @summary GetMe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGet(options?: RawAxiosRequestConfig): AxiosPromise<ResponseUserResponse> {
            return localVarFp.meGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 自身のユーザー情報を取得する
     * @summary GetMe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public meGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).meGet(options).then((request) => request(this.axios, this.basePath));
    }
}



